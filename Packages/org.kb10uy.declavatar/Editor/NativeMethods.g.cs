// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace KusakaFactory.Declavatar
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "declavac";



        /// <summary>Fetches compile log localization.  # Safety Given pointers must be valid.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_log_localization", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_log_localization(byte* locale, uint locale_len, byte** json_string, uint* json_string_len);

        /// <summary>Initializes declavatar compiler state.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_init", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern void* declavatar_init();

        /// <summary>Frees declavatar compiler state.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_free(void* declavatar_state);

        /// <summary>Fetches last error message.  # Safety Given pointer `da` must be valid.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_last_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_last_error(void* declavatar_state, byte** message, uint* message_len);

        /// <summary>Clears defined symbols/localizations/arbittach definitions.  # Safety Given pointer `da` must be valid.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_clear", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_clear(void* declavatar_state);

        /// <summary>Clears defined symbols/localizations/arbittach definitions.  # Safety Given pointers must be valid. `path` does not have to NUL-terminated.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_add_library_path", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_add_library_path(void* declavatar_state, byte* path, uint path_len);

        /// <summary>Defines a symbol for given state.  # Safety Given pointers must be valid. `symbol` does not have to NUL-terminated.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_define_symbol", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_define_symbol(void* declavatar_state, byte* symbol, uint symbol_len);

        /// <summary>Defines a localization for given state.  # Safety Given pointers must be valid. `key`, `value` does not have to NUL-terminated.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_define_localization", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_define_localization(void* declavatar_state, byte* key, uint key_len, byte* value, uint value_len);

        /// <summary>Registers Arbitrary Attachment (arbittach) definition.  # Safety Given pointers must be valid. `definition` does not have to NUL-terminated.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_register_arbittach", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_register_arbittach(void* declavatar_state, byte* definition, uint definition_len);

        /// <summary>Compiles definition with format.  # Safety Given pointers must be valid. `source` does not have to NUL-terminated.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_compile", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_compile(void* declavatar_state, void** compiled_state, byte* source, uint source_len, DeclavatarFormat format_kind);

        /// <summary>Frees compiled result.  # Safety Given pointer must be valid.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_compiled_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_compiled_free(void* compiled_state);

        /// <summary>Retrieves the pointer of compiled JSON string.  # Safety Given pointer must be valid. Returned string is not NUL-terminated.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_compiled_avatar_json", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_compiled_avatar_json(void* compiled_state, byte** json_string, uint* json_string_len);

        /// <summary>Retrieves the count of compile logs.  # Safety Given pointer must be valid.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_compiled_logs_count", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_compiled_logs_count(void* compiled_state, uint* logs_count);

        /// <summary>Retrieves the pointer of compile log as JSON.  # Safety Given pointer must be valid. Returned string is not NUL-terminated.</summary>
        [DllImport(__DllName, EntryPoint = "declavatar_compiled_log", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern DeclavatarStatus declavatar_compiled_log(void* compiled_state, uint index, byte** json_string, uint* json_string_len);


    }


    internal enum DeclavatarStatus : uint
    {
        Success = 0,
        Utf8Error = 1,
        JsonError = 2,
        CompileError = 3,
        InvalidPointer = 128,
        InvalidValue = 129,
    }

    internal enum DeclavatarFormat : uint
    {
        Sexpr = 1,
        Lua = 2,
    }


}
    